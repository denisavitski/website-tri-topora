---
import CaptureOnce from './CaptureOnce.astro'
import Counter from './Counter.astro'
import SwipeModal from './SwipeModal.astro'

export const modal = '#hashtags-filter'

export interface Props {
  class?: string
  hashtags?: Map<string, number>
}

const {
  class: className,
  hashtags = new Map([
    ['Все', 1],
    ['Some', 1],
  ]),
  ...rest
} = Astro.props
---

<!-- 
  После изменений, фильтр генерирует событие hashtagsFilterChange.

  // Кастомные элементы готовы к работе
  addEventListener('load', () => {
    const filterElement = document.querySelector("hashtags-filter")

    filterElement.addEventListener('filterChange', (e) => {
      // Значение
      console.log(e.detail, filterElement.value)
    })
  })
-->
<SwipeModal
  {...rest}
  class={`hashtags-filter ${className || ''}`}
  id="hashtags-filter"
  tag="hashtags-filter"
>
  <CaptureOnce class="hashtags-filter__buttons">
    {
      Array.from(hashtags).map(([hashtag, amount], i) => {
        return (
          <label
            class="hashtags-filter__button"
            style={{ '--index': i }}
          >
            <span class="hashtags-filter__button__inner">
              <input
                type="radio"
                name="hashtag"
                value={hashtag}
                checked={i === 0}
                class="visually-hidden hashtags-filter__button__input"
              />
              <Counter
                class="hashtags-filter__button__value"
                name={hashtag}
                amount={amount}
              />
            </span>
          </label>
        )
      })
    }
  </CaptureOnce>
</SwipeModal>

<style is:global>
  .hashtags-filter__buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 1.6rem;

    @media (max-width: 768px) {
      flex-direction: column;
    }
  }

  .hashtags-filter__button {
    overflow: hidden;
  }

  .hashtags-filter__button__inner {
    display: block;

    @media (min-width: 769px) {
      transition: transform 0.5s calc(0.05s * var(--index)) var(--ease-out-expo);
      transform: translate3d(0, 101%, 0);

      .hashtags-filter__buttons.captured & {
        transform: translate3d(0, 0, 0);
      }
    }
  }
</style>

<script>
  import { SwipePopoverElement } from '@lib/SwipePopoverElement'
  import { dispatchEvent } from 'aptechka/utils'

  export interface HashtagsFilterEvents {
    hashtagsFilterChange: CustomEvent<string>
  }

  export class HashtagsFilterElement extends SwipePopoverElement {
    #inputElements: Array<HTMLInputElement> = []

    #value: string = ''

    constructor() {
      super()

      this.addEventListener('popoverOpened', () => {
        window.dispatchEvent(new Event('resize'))
      })
    }

    public get value() {
      return this.#value
    }

    public changeValue(value: string) {
      const input = this.#inputElements.find((input) => input.value === value)

      if (input) {
        input.checked = true
        this.#inputListener()
      }
    }

    protected override connectedCallback() {
      super.connectedCallback()

      this.#inputElements = [
        ...this.querySelectorAll<HTMLInputElement>('input'),
      ]

      this.#updateValue()

      this.#inputElements.forEach((input) => {
        input.addEventListener('change', this.#inputListener)
      })
    }

    protected override disconnectedCallback() {
      super.disconnectedCallback()

      this.#inputElements.forEach((input) => {
        input.removeEventListener('change', this.#inputListener)
      })
    }

    #inputListener = () => {
      this.#updateValue()

      dispatchEvent(this, 'hashtagsFilterChange', {
        custom: true,
        detail: this.#value,
      })
    }

    #updateValue() {
      const input = this.#inputElements.find((input) => input.checked)

      if (input) {
        this.#value = input.value
      } else {
        this.#value = ''
      }
    }
  }

  if (!customElements.get('hashtags-filter')) {
    customElements.define('hashtags-filter', HashtagsFilterElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'hashtags-filter': HashtagsFilterElement
    }

    interface HTMLElementEventMap extends HashtagsFilterEvents {}
  }
</script>
