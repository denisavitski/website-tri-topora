---
import type { HTMLAttributes } from 'astro/types'

import { type Props as InputProps } from '@elements/Input.astro'

export interface CommmonFormProps {
  inputs: Array<InputProps>
  submitButton?: string
  terms?: string
  successTitle?: string
  successMessage?: string
  errorMessage?: string
}

export interface Props extends HTMLAttributes<'div'> {
  name?: string
  handler?: string
  successTitle?: string | undefined | false
  successMessage?: string | undefined | false
  errorMessage?: string | undefined | false
  reusable?: boolean
}

const { name = 'form', handler = '/test', successTitle, successMessage, errorMessage, reusable = true, ...rest } = Astro.props
---

<!-- 
  Если указан handler отличный от /test, данные из формы отправятся по нему, 
  и по успешному завершению откроется модалка. 
-->
<e-form
  {...rest}
  success-title={successTitle}
  success-message={successMessage}
  error-message={errorMessage}
  {name}
  {handler}
  {reusable}>
  <form>
    <input
      type="hidden"
      name="page"
    />
    <input
      type="hidden"
      name="pageName"
    />

    <slot />
  </form>
</e-form>

<style is:global>
  e-form {
    display: block;
  }

  e-form form {
    display: contents;
  }
</style>

<script>
  import { PopoverElement, type PopoverEvents } from 'aptechka/popover'
  import { dispatchEvent, findParentElement } from 'aptechka/utils'

  export class FormElement extends HTMLElement {
    #popoverElement: PopoverElement | null = null
    #formElement: HTMLFormElement | null = null
    #buttonElement: HTMLButtonElement | null = null
    #inputElements: Array<HTMLInputElement> | null = null
    #pageInputElement: HTMLInputElement | null = null
    #pageNameInputElement: HTMLInputElement | null = null
    #sended = false
    #handler = '/test'
    #isReusable = false

    protected connectedCallback() {
      this.#popoverElement = findParentElement(this, PopoverElement)

      this.#formElement = this.querySelector('form')

      this.#handler = this.getAttribute('handler') || '/test'
      this.#isReusable = this.hasAttribute('reusable')

      if (this.#formElement) {
        this.#pageInputElement = this.querySelector('[name="page"]')
        this.#pageNameInputElement = this.querySelector('[name="pageName"]')

        this.#formElement.addEventListener('submit', this.#submitListener)

        this.#inputElements = [...this.#formElement.querySelectorAll('input')]

        this.#inputElements.forEach((inputElement) => {
          inputElement.addEventListener('input', this.#inputListener)
        })

        this.#buttonElement = this.#formElement.querySelector('button[type="submit"]')

        this.#inputListener()

        if (this.#handler === 'fetchit') {
          document.addEventListener('fetchit:success', this.#fetchitSuccesListener as EventListener)
          document.addEventListener('fetchit:error', this.#fetchitErrorListener as EventListener)
        }
      }

      this.#popoverElement?.addEventListener('popoverOpened', this.#popoverOpenedListener)
    }

    protected disconnectedCallback() {
      this.#inputElements?.forEach((inputElement) => inputElement.removeEventListener('input', this.#inputListener))

      this.#formElement?.removeEventListener('submit', this.#submitListener)

      document.removeEventListener('fetchit:success', this.#fetchitSuccesListener as EventListener)
      document.removeEventListener('fetchit:error', this.#fetchitErrorListener as EventListener)

      this.#popoverElement?.removeEventListener('popoverOpened', this.#popoverOpenedListener)
    }

    #submitListener = async (e: SubmitEvent) => {
      e.preventDefault()

      if (this.#handler === 'fetchit' || (this.#sended && !this.#isReusable)) {
        return
      }

      this.#sended = true

      const formData = new FormData(this.#formElement!)
      formData.set('form-name', this.getAttribute('name') || 'unknown')

      for (let pair of formData) {
        console.log(pair[0] + ', ' + pair[1])
      }

      this.classList.add('pending')

      try {
        if (this.#handler === '/test') {
          await new Promise<void>((res) => {
            setTimeout(() => {
              res()
              this.classList.add('success')
            }, 50)
          })
        } else {
          await fetch(this.#handler, {
            method: 'POST',
            body: formData,
          })
        }

        this.#success()
      } catch (e) {
        console.error(e)
        this.#error()
      }

      this.classList.remove('pending')
    }

    #inputListener = () => {
      const validInputs = this.#inputElements?.filter((inputElement) => {
        return inputElement.validity.valid
      }).length

      if (this.#buttonElement) {
        if (validInputs === this.#inputElements?.length) {
          this.#buttonElement.disabled = false
        } else {
          this.#buttonElement.disabled = true
        }
      }
    }

    #fetchitSuccesListener = (e: CustomEvent) => {
      console.log('[fetchit success event]', e)

      const { form } = (e as CustomEvent)?.detail as { form: HTMLFormElement }

      if (this.#formElement === form) {
        this.#success()
      }
    }

    #fetchitErrorListener = (e: CustomEvent) => {
      console.log('[fetchit error event]', e)

      const { form } = (e as CustomEvent)?.detail as { form: HTMLFormElement }

      if (this.#formElement === form) {
        this.#error()
      }
    }

    #success() {
      const answerElement = document.querySelector('e-form-answer')

      if (answerElement) {
        const successTitle = this.getAttribute('success-title')
        const successMessage = this.getAttribute('success-message')

        if (successTitle && successMessage) {
          answerElement.setText(successTitle, successMessage)
          answerElement.open()
        }
      }

      if (this.#isReusable) {
        this.#inputElements?.forEach((element) => {
          const customInput = element.closest('e-input') as HTMLElement

          if (customInput) {
            dispatchEvent(customInput, 'resetInput')
          }
        })
      }
    }

    #error() {
      const errorMessage = this.getAttribute('error-message')

      alert(errorMessage)

      this.#sended = false
    }

    #popoverOpenedListener = (e: PopoverEvents['popoverOpened']) => {
      const trigger = e.detail.trigger

      if (trigger instanceof HTMLElement) {
        const pageName = trigger.getAttribute('data-page-name')
        const page = trigger.getAttribute('data-page')

        if (pageName && this.#pageNameInputElement) {
          this.#pageNameInputElement.value = pageName
        }

        if (page && this.#pageInputElement) {
          this.#pageInputElement.value = page
        }
      }
    }
  }

  if (!customElements.get('e-form')) {
    customElements.define('e-form', FormElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-form': FormElement
    }
  }
</script>
