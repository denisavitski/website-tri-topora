---
import type { ImageDataProps } from './Image.astro'
import Image from './Image.astro'

export interface Props {
  class?: string
  images?: Array<ImageDataProps>
}

const {
  class: className,
  images = [
    {
      src: '/images/dev/1.jpg',
    },
    {
      src: '/images/dev/2.jpg',
    },
    {
      src: '/images/dev/3.jpg',
    },
    {
      src: '/images/dev/4.jpg',
    },
  ],
  ...rest
} = Astro.props
---

<image-morph
  {...rest}
  class:list={['image-morph', className]}
>
  {
    images.map((image) => {
      return (
        <Image
          class="image-morph__item"
          lazy
          lazyBackground
          cover
          {...image}
        />
      )
    })
  }
</image-morph>

<style is:global>
  .image-morph {
    --delay: 3s;
    display: grid;
    width: 100%;
    height: 100%;
  }

  .image-morph__item {
    grid-column: 1/1;
    grid-row: 1/1;

    width: 100%;
    height: 100%;

    transition: opacity calc(var(--delay) / 2);
    opacity: 0;

    &.current {
      opacity: 1;
    }
  }
</style>

<script>
  import { CSSProperty } from 'aptechka/css-property'
  import { intersector } from 'aptechka/intersector'
  import { loopNumber } from 'aptechka/utils'

  export class ImagesMorphElement extends HTMLElement {
    #delay = new CSSProperty(this, '--delay', '1s')
    #intervalId: ReturnType<typeof setInterval> | undefined
    #isIntersecting = false
    #itemElements: Array<HTMLElement> = []
    #counter = 0

    protected connectedCallback() {
      this.#itemElements = [
        ...this.querySelectorAll<HTMLElement>('.image-morph__item'),
      ]

      this.#itemElements[0]?.classList.add('current')

      this.#delay.subscribe(() => {
        this.#spawnInterval()
      })

      this.#delay.observe()

      intersector.subscribe(this, this.#intersectionListener)
    }

    protected disconnectedCallback() {
      this.#delay.unobserve()

      intersector.unsubscribe(this.#intersectionListener)
      clearInterval(this.#intervalId)
    }

    #intersectionListener = (e: IntersectionObserverEntry) => {
      this.#isIntersecting = e.isIntersecting

      if (this.#isIntersecting) {
        this.#spawnInterval()
      } else {
        clearInterval(this.#intervalId)
      }
    }

    #spawnInterval = () => {
      clearInterval(this.#intervalId)

      if (this.#isIntersecting) {
        this.#intervalId = setInterval(
          this.#tick,
          parseFloat(this.#delay.current || '0') * 1000,
        )
      }
    }

    #tick = () => {
      this.#counter = loopNumber(this.#counter + 1, this.#itemElements.length)

      this.#itemElements.forEach((itemElement, i) => {
        if (i === this.#counter) {
          itemElement.classList.add('current')
        } else {
          itemElement.classList.remove('current')
        }
      })
    }
  }

  if (!customElements.get('image-morph')) {
    customElements.define('image-morph', ImagesMorphElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'image-morph': ImagesMorphElement
    }
  }
</script>
