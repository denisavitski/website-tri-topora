---
import type { HTMLAttributes } from 'astro/types'

export interface Props extends HTMLAttributes<any> {
  class?: string
  tag?: string
  lazy?: boolean | undefined
  cover?: boolean | undefined
  contain?: boolean | undefined
  lazyBackground?: boolean | undefined
  reloadSource?: boolean | undefined
  rounded?: boolean | undefined
}

const {
  class: className,
  tag = 'div',
  lazyBackground,
  rounded,
  reloadSource,
  ...rest
} = Astro.props

const Tag = tag
---

<Tag
  {...rest}
  class:list={[className, 'media-wrapper']}
  lazy-background={lazyBackground}
  reload-source={reloadSource}
  data-rounded={rounded}
>
  <slot />
</Tag>

<style is:global>
  .media-wrapper {
    position: relative;
    z-index: 1;
    display: block;

    overflow: hidden;

    &[data-rounded] {
      border-radius: 0.8rem;
    }
  }

  .media-wrapper {
    --clear-duration: 1s;
  }

  .media-wrapper * {
    opacity: 0;

    width: 100%;
    height: 100%;
  }

  .media-wrapper.loaded * {
    transition: opacity var(--clear-duration);
    opacity: 1;
  }

  .media-wrapper[cover] * {
    object-fit: cover;
  }

  .media-wrapper[contain] * {
    object-fit: contain;
  }

  .media-wrapper[lazy-background]::before {
    content: '';

    position: absolute;

    z-index: -1;

    width: 100%;
    height: 100%;

    background: var(--lazy-background, var(--color-grey-4));

    animation: media-loading 2s infinite ease-in-out;

    will-change: opacity;
  }

  .media-wrapper[lazy-background].clear::before {
    content: unset;
  }

  @keyframes media-loading {
    50% {
      opacity: var(--lazy-background-opacity, 0.6);
    }
  }
</style>
