---
import CaptureOnce from '@elements/CaptureOnce.astro'
import type { ImageDataProps } from '@elements/Image.astro'
import Image from '@elements/Image.astro'
import ScrollTextToaster from '@elements/ScrollTextToaster.astro'
import SectionHeading from '@elements/SectionHeading.astro'
import SliderStatic from '@elements/SliderStatic.astro'

export interface Props {
  heading?: string
  description?: string
  types?: Array<{
    name: string
    image: ImageDataProps
  }>
}

const {
  heading = 'что мы строим',
  description = 'Каменная архитектура, дома с панорамными окнами, дизайнерские планировки и безупречное качество',
  types = [
    {
      name: 'Дома из бревна',
      image: {
        src: '/images/buildings/1.jpg',
        alt: 'Дома из бревна',
      },
    },
    {
      name: 'Дома из бруса',
      image: {
        src: '/images/buildings/2.jpg',
        alt: 'Дома из бруса',
      },
    },
    {
      name: 'Бани и СПА-комплексы',
      image: {
        src: '/images/buildings/3.jpg',
        alt: 'Бани и СПА-комплексы',
      },
    },
    {
      name: 'Коммерческая недвижимость',
      image: {
        src: '/images/buildings/4.jpg',
        alt: 'Коммерческая недвижимость',
      },
    },
  ],
} = Astro.props
---

<!-- BLOCK -->
<e-variants class="variants">
  <div class="variants__left">
    <SectionHeading
      class="variants__heading"
      text={heading}
      revealOnScroll
    />
    <p class="variants__description">
      <ScrollTextToaster text={description} />
    </p>
    <div class="variants__list">
      <CaptureOnce class="variants__list__inner">
        {
          types.map((item, i) => {
            return (
              <button
                class="variants__list__button"
                style={{ '--index': i }}>
                <span class="variants__list__button__value">{item.name}</span>
              </button>
            )
          })
        }
      </CaptureOnce>
    </div>
  </div>

  <CaptureOnce class="variants__slider-wrapper">
    <e-scroll class="variants__slider">
      <SliderStatic class="variants__slider__static" />

      {
        types.map((item) => {
          return (
            <div class="variants__slider__item">
              <Image
                {...item.image}
                class="variants__slider__image"
                cover
                rounded
                lazy
                lazyBackground
              />
            </div>
          )
        })
      }
    </e-scroll>
  </CaptureOnce>
</e-variants>

<style is:global>
  .variants {
    position: relative;
    z-index: calc(var(--z-lines) + 1);

    padding: var(--section-vertical-padding) var(--screen-horisontal-padding);

    display: flex;
    gap: 2.4rem;

    overflow: hidden;

    @media (max-width: 768px) {
      flex-direction: column;
      padding: var(--section-vertical-padding) 0;
    }
  }

  .variants__left {
    flex-shrink: 0;
    width: 52rem;

    @media (max-width: 768px) {
      width: 100%;
      padding: 0 var(--screen-horisontal-padding);
    }
  }

  .variants__heading {
    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      margin-bottom: 2.4rem;
    }
  }

  .variants__description {
    font-size: 2.2rem;
    font-weight: 300;

    margin-bottom: 2.4rem;

    @media (max-width: 768px) {
      font-size: 1.6rem;
    }
  }

  .variants__list {
    --height: 22.7rem;
    --item-per-view: 4;
    --item-height: calc(var(--height) / var(--item-per-view));

    position: relative;

    width: 33.6rem;
    height: var(--height);
    overflow: hidden;

    @media (max-width: 768px) {
      width: 100%;
      --height: 15.6rem;

      margin-bottom: 2.6rem;
    }
  }

  .variants__list__inner {
    --start-offset: -80vh;
    --capture-once: true;

    display: flex;
    flex-direction: column;
    height: max-content;

    transition: transform var(--duration-button) ease-in-out;
    transform: translateY(calc(var(--counter) * var(--item-height) * -1));
  }

  .variants__list::after {
    content: '';

    position: absolute;
    top: 0;
    left: 0;

    width: 100%;
    height: 100%;

    background-image: linear-gradient(to bottom, rgba(34, 34, 34, 0) 20%, rgba(34, 34, 34, 1) 100%);

    pointer-events: none;
  }

  .variants__list__button {
    font-size: 2.4rem;
    text-align: start;

    height: var(--item-height);

    color: var(--color-grey-5);

    @media (max-width: 768px) {
      font-size: 1.6rem;
    }

    @media (min-width: 769px) {
      transform: translateX(-101%);
      transition: transform 1s calc(0.1s * var(--index, 0));

      .variants__list__inner.captured & {
        transform: translateX(0);
      }
    }
  }

  .variants__list__button__value {
    transition: color var(--duration-button);

    .variants__list__button.current & {
      color: var(--color-white-1);
    }

    @media (hover: hover) {
      .variants__list__button:hover & {
        color: var(--color-white-1);
      }
    }
  }

  .variants__slider-wrapper {
    width: 122rem;
    height: 59.2rem;

    @media (max-width: 768px) {
      width: 100%;
      height: 28.1rem;
    }
  }

  .variants__slider {
    --axis: x;
    --gap: 3rem;
    --overflow: hidden;
    --sectional: true;
    --classes: true;

    display: flex;
    gap: var(--gap);

    @media (max-width: 768px) {
      --gap: 1.7rem;
    }
  }

  .variants__slider__static {
    right: calc(100% + 2.4rem);
    bottom: 0;

    @media (max-width: 768px) {
      right: unset;
      left: var(--screen-horisontal-padding);
      bottom: calc(100% + 1.6rem);
    }
  }

  .variants__slider__item {
    position: relative;

    width: 92.4rem;

    @media (max-width: 768px) {
      width: 34.3rem;
    }
  }

  .variants__slider__image {
    width: 100%;
    height: 100%;

    &::after {
      content: '';

      position: absolute;
      top: 0;
      left: 0;

      z-index: 1;

      width: 100%;
      height: 100%;

      opacity: 1;

      transition: opacity var(--duration-button);

      background-color: rgba(0, 0, 0, 0.3);
    }

    .variants__slider__item.current &::after {
      opacity: 0;
    }

    @media (min-width: 769px) {
      .variants__slider__item:nth-of-type(1) &,
      .variants__slider__item:nth-of-type(2) &,
      .variants__slider__item:nth-of-type(3) & {
        clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);

        transition: clip-path 1.5s calc(0.2s * var(--index, 0));
      }

      .variants__slider__item:nth-of-type(1) & {
        --index: 0;
      }

      .variants__slider__item:nth-of-type(2) & {
        --index: 1;
      }

      .variants__slider-wrapper.captured & {
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
      }
    }
  }
</style>

<script>
  import type { ScrollElement } from 'aptechka/scroll'

  export class VariantsElement extends HTMLElement {
    #scrollElement: ScrollElement | null = null
    #listButtonElements: Array<HTMLElement> = []

    protected connectedCallback() {
      this.#listButtonElements = [...this.querySelectorAll<HTMLElement>('.variants__list__button')]

      this.#listButtonElements.forEach((element) => element.addEventListener('click', this.#buttonClickListener))

      this.#scrollElement = this.querySelector('.variants__slider')

      customElements.whenDefined('e-scroll').then(() => {
        setTimeout(() => {
          if (this.isConnected) {
            this.#scrollElement?.counter.subscribe(this.#scrollCounterListener)
          }
        }, 10)
      })
    }

    protected disconnectedCallback() {
      this.#listButtonElements.forEach((element) => element.removeEventListener('click', this.#buttonClickListener))
    }

    #buttonClickListener = (e: Event) => {
      const ct = e.currentTarget as HTMLElement
      const index = this.#listButtonElements.findIndex((e) => e === ct)

      if (index >= 0) {
        this.#scrollElement?.scrollToSection(index)
      }
    }

    #scrollCounterListener = () => {
      const counter = this.#scrollElement?.counter.current || 0

      this.style.setProperty('--counter', counter.toString())

      this.#listButtonElements.forEach((element, i) => {
        if (i === counter) {
          element.classList.add('current')
        } else {
          element.classList.remove('current')
        }
      })
    }
  }

  if (!customElements.get('e-variants')) {
    customElements.define('e-variants', VariantsElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-variants': VariantsElement
    }
  }
</script>
