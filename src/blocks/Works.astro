---
import Image, { type ImageDataProps } from '@elements/Image.astro'
import ScrollToaster from '@elements/ScrollToaster.astro'
import SectionHeading from '@elements/SectionHeading.astro'
import SimpleButton from '@elements/SimpleButton.astro'

export interface Props {
  heading?: string
  list?: Array<ImageDataProps>
  description?: Array<string> | false
}

const { heading = 'Фото работ', list = [{ src: '/images/dev/image/1.jpg' }, { src: '/images/dev/image/2.jpg' }, { src: '/images/dev/image/3.jpg' }, { src: '/images/dev/image/4.jpg' }, { src: '/images/dev/image/5.jpg' }, { src: '/images/dev/image/6.jpg' }, { src: '/images/dev/image/7.jpg' }, { src: '/images/dev/image/8.jpg' }, { src: '/images/dev/image/9.jpg' }, { src: '/images/dev/image/1.jpg' }, { src: '/images/dev/image/2.jpg' }, { src: '/images/dev/image/3.jpg' }, { src: '/images/dev/image/4.jpg' }, { src: '/images/dev/image/5.jpg' }, { src: '/images/dev/image/6.jpg' }, { src: '/images/dev/image/7.jpg' }, { src: '/images/dev/image/8.jpg' }, { src: '/images/dev/image/9.jpg' }], description = ['Работаем с 2007 года', 'Реализовано более 120 проектов, вот некоторые из них'] } = Astro.props
---

<!-- BLOCK -->
<e-works class="works">
  <SectionHeading
    class="works__heading"
    text={heading}
    revealOnScroll
  />

  {
    description && description.length && (
      <ScrollToaster
        vector={'right'}
        type={'clip'}
        class="works__description">
        {description.map((item) => {
          return (
            <div
              class="works__description__item"
              set:html={item}
            />
          )
        })}
      </ScrollToaster>
    )
  }

  <e-masonry-layout class="works__list">
    {
      list.map((item, i) => {
        return (
          <ScrollToaster
            type={'clip'}
            vector={i % 2 === 0 ? 'left' : 'right'}>
            <Image
              class="works__list__item"
              {...item}
              lazy
              lazyBackground
              cover
              aria-hidden={i > 9}
              rounded
            />
          </ScrollToaster>
        )
      })
    }
  </e-masonry-layout>

  <SimpleButton class="works__more-button">Смотреть ещё</SimpleButton>
</e-works>

<style is:global>
  .works {
    position: relative;

    z-index: calc(var(--z-lines) + 1);

    padding: var(--section-vertical-padding) var(--screen-horisontal-padding);

    display: flex;
    flex-direction: column;
    align-items: center;

    @media (max-width: 768px) {
      padding-left: 0;
      padding-right: 0;
    }
  }

  .works__heading {
    margin-bottom: 3.2rem;
    margin-right: auto;

    @media (max-width: 768px) {
      margin-bottom: 2.4rem;
      padding-left: var(--screen-horisontal-padding);
    }
  }

  .works__description {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem 2.2rem;

    width: 100%;
    margin-bottom: 2.4rem;

    @media (max-width: 768px) {
      padding: 0 var(--screen-horisontal-padding);
      gap: 0.4rem 1.6rem;
      margin-bottom: 0.8rem;
    }
  }

  .works__description__item {
    font-family: 'Code', sans-serif;
    font-weight: 400;
    font-size: 2.4rem;
    line-height: 3.516rem;
    text-transform: uppercase;

    display: inline-flex;
    align-items: center;
    gap: 2.2rem;

    &:not(:last-child)::after {
      content: '';

      width: 0.6rem;
      height: 0.6rem;

      background-color: var(--color-white-1);

      border-radius: 50%;
    }

    @media (max-width: 768px) {
      font-size: 1.4rem;
      line-height: 2.51rem;

      gap: 1.6rem;
    }
  }

  .works__list {
    --transition: 1.5s;

    --columns: 2;
    --gap: 2.4rem;

    gap: var(--gap);
    width: 100%;
    margin-bottom: 4.8rem;

    @media (max-width: 768px) {
      --columns: 1;
      --gap: 0.8rem;

      margin-bottom: 2.4rem;
    }
  }

  .works__list__item {
    width: 100%;
    min-height: 40rem;

    &[aria-hidden='true'] {
      display: none;
    }

    @media (max-width: 768px) {
      min-height: 20rem;
    }
  }

  .works__more-button {
    @media (max-width: 768px) {
      width: calc(100% - var(--screen-horisontal-padding) * 2);
    }
  }
</style>

<script>
  export class WorksElement extends HTMLElement {
    #moreButtonElement: HTMLElement | null = null
    #itemElements: Array<HTMLElement> = []

    #itemsPerPage = 10
    #currentPage = 0

    protected connectedCallback() {
      this.#moreButtonElement = this.querySelector('.works__more-button')
      this.#itemElements = [...this.querySelectorAll<HTMLElement>('.works__list__item')]

      this.#moreButtonElement?.addEventListener('click', this.#moreButtonListener)

      this.#moreButtonListener()

      this.#itemElements.forEach((item) => {
        item.addEventListener('load', this.#loadListener)
      })
    }

    protected disconnectedCallback() {
      this.#moreButtonElement?.removeEventListener('click', this.#moreButtonListener)

      this.#itemElements.forEach((item) => {
        item.removeEventListener('load', this.#loadListener)
      })
    }

    #moreButtonListener = () => {
      this.#currentPage += 1

      this.#itemElements.forEach((item, i) => {
        if (i < this.#currentPage * this.#itemsPerPage) {
          item.ariaHidden = 'false'
        }
      })

      if (this.#currentPage === Math.ceil(this.#itemElements.length / this.#itemsPerPage)) {
        this.#moreButtonElement?.remove()
      }
    }

    #loadListener = () => {
      window.dispatchEvent(new Event('resize'))
    }
  }

  if (!customElements.get('e-works')) {
    customElements.define('e-works', WorksElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-works': WorksElement
    }
  }
</script>
