---
import CaptureOnce from '@elements/CaptureOnce.astro'
import LookCard, { type Props as LookCardProps } from '@elements/LookCard.astro'
import SectionHeading from '@elements/SectionHeading.astro'
import SliderButtons from '@elements/SliderButtons.astro'

export interface Props {
  heading?: string
  cards?: Array<Pick<LookCardProps, 'circleText' | 'image' | 'value'>>
}

const {
  heading = 'Интерьеры',
  cards = [
    {
      circleText: 'Смотреть',
      image: {
        src: '/images/dev/1.jpg',
        lazy: true,
        lazyBackground: true,
      },
      value: '/images/dev/1.jpg',
    },
    {
      circleText: 'Смотреть',
      image: {
        src: '/images/dev/2.jpg',
        lazy: true,
        lazyBackground: true,
      },
      modal: 'images-modal',
      value: '/images/dev/2.jpg',
    },
    {
      circleText: 'Смотреть',
      image: {
        src: '/images/dev/3.jpg',
        lazy: true,
        lazyBackground: true,
      },
      value: '/images/dev/3.jpg',
    },
    {
      circleText: 'Смотреть',
      image: {
        src: '/images/dev/4.jpg',
        lazy: true,
        lazyBackground: true,
      },
      value: '/images/dev/4.jpg',
    },
    {
      circleText: 'Смотреть',
      image: {
        src: '/images/dev/5.jpg',
        lazy: true,
        lazyBackground: true,
      },
      value: '/images/dev/5.jpg',
    },
    {
      circleText: 'Смотреть',
      image: {
        src: '/images/dev/6.jpg',
        lazy: true,
        lazyBackground: true,
      },
      value: '/images/dev/6.jpg',
    },
  ],
} = Astro.props
---

<!-- BLOCK -->
<section class="interiors">
  <SectionHeading
    class="interiors__heading"
    text={heading}
    revealOnScroll
  />

  <CaptureOnce class="interiors__slider-wrapper">
    <e-scroll class="interiors__slider">
      {
        cards.map((card, i) => {
          return (
            <div
              class="interiors__slider__item"
              style={{ '--index': i }}
            >
              <LookCard
                class="interiors__slider__card"
                modal="images-modal"
                group="interiors"
                {...card}
              />
            </div>
          )
        })
      }
      <SliderButtons
        class="interiors__slider__buttons"
        slot="static"
      />
    </e-scroll>
  </CaptureOnce>
</section>

<style is:global>
  .interiors {
    position: relative;
    z-index: calc(var(--z-lines) + 1);

    padding: var(--section-vertical-padding) var(--screen-horisontal-padding);

    @media (max-width: 768px) {
      padding: var(--section-vertical-padding) 0;
    }
  }

  .interiors__heading {
    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      padding: 0 var(--screen-horisontal-padding);
      margin-bottom: 2.4rem;
    }
  }

  .interiors__slider {
    --axis: x;
    --gap: 2.4rem;
    --classes: true;
    --overflow: hidden;
    --sectional: true;
    --sections-in-view: 3;
    --auto-size: true;

    display: flex;
    gap: var(--gap);

    height: 64rem;

    @media (max-width: 768px) {
      --gap: 0.8rem;
      --sections-in-view: 1.1;
      height: 30rem;
    }
  }

  .interiors__slider__buttons {
    position: absolute;
    right: 0;
    bottom: calc(100% + 4.4rem);
  }

  .interiors__slider__item {
    width: 100%;
    height: 100%;

    @media (min-width: 769px) {
      &:nth-of-type(1),
      &:nth-of-type(2),
      &:nth-of-type(3) {
        clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);
        transition: clip-path 1.5s calc(0.1s * var(--index, 0));

        .interiors__slider-wrapper.captured & {
          clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
        }
      }
    }
  }

  .interiors__slider__card {
    width: 100%;
    height: 100%;
  }
</style>
