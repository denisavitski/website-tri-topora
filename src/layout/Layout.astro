---
import Header from '@singletons/Header.astro'
import Footer from '@singletons/Footer.astro'
import IframeModal from '@singletons/IframeModal.astro'
import FormAnswer from '@singletons/FormAnswer.astro'
import Scrollbar from '@singletons/Scrollbar.astro'

import Head from './Head.astro'
import { type Props as SeoProps } from './Seo.astro'
import Consultation from '@singletons/Consultation.astro'
import ImagesModal from '@singletons/ImagesModal.astro'
import FounderLetter from '@singletons/FounderLetter.astro'
import Lines from '@singletons/Lines.astro'
import Requisites from '@singletons/Requisites.astro'

export interface Props {
  header?: boolean
  headerBlackAndWhite?: boolean
  footer?: boolean
  cookies?: boolean
  formResultModal?: boolean
  ctaModal?: boolean
  partnerModal?: boolean
  seo?: SeoProps | undefined
  lines?: boolean
}

const { header = true, footer = true, lines = true, seo } = Astro.props
---

<html lang="ru">
  <Head {seo} />

  <body>
    <div class="page">
      {header && <Header />}

      <IframeModal />
      <ImagesModal />
      <FounderLetter />
      <Consultation />
      <Requisites />
      <FormAnswer />

      <div
        data-morph
        class="morph">
        <div
          class="morph__sheet hidden-scrollbar"
          id="page-scroll">
          <Scrollbar />

          <main>
            {lines && <Lines />}
            <slot />
          </main>

          {footer && <Footer />}
        </div>
      </div>
    </div>
  </body></html
>

<style is:global>
  .page {
    width: 100%;
    height: 100%;
    overflow: hidden;

    opacity: 0;
    pointer-events: none;

    .page-loaded & {
      opacity: 1;
      transition: opacity 1s;
      pointer-events: auto;
    }
  }

  .scroll {
    width: 100%;
    height: 100%;

    padding-top: var(--header-height);

    overflow: hidden auto;

    .dragging & {
      overflow: hidden;
    }
  }

  .morph {
    width: 100%;
    height: 100%;

    display: grid;
    grid-template-columns: 100%;
    overflow: hidden;

    --morph-duration: 0.4s;
    --ease: var(--ease-in-out-sine);

    background-color: var(--color-grey-1);
  }

  .morph__sheet {
    grid-column: 1/1;
    grid-row: 1/1;

    width: 100%;
    height: 100%;

    padding-top: var(--header-height);

    overflow: hidden auto;

    background-color: var(--color-grey-2);

    .dragging & {
      overflow: hidden;
    }

    &.current {
      transition-duration: var(--morph-duration);
      transition-timing-function: var(--ease);
      transition-property: transform, opacity;
      opacity: 0.5;
    }

    &.old {
      transition-duration: var(--morph-duration);
      transition-timing-function: var(--ease);
      transition-property: transform, opacity;

      transform-origin: bottom;

      pointer-events: none;

      @media (min-width: 769px) {
        transform: translateY(4rem) scale(0.99);
      }
    }

    &.old {
      opacity: 0.3;
    }

    &.new {
      z-index: 2;

      @media (min-width: 769px) {
        will-change: clip-path;
        clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);
      }

      @media (max-width: 768px) {
        will-change: opacity;
        opacity: 0;
      }
    }

    &.in {
      transition-duration: var(--morph-duration);
      transition-timing-function: var(--ease);
      transition-property: transform, clip-path, opacity;

      @media (min-width: 769px) {
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
      }

      @media (max-width: 768px) {
        opacity: 1;
      }
    }
  }

  main {
    /* position: relative; */
    /* z-index: 1; */
  }
</style>

<script>
  import '@globals/main.ts'
</script>
